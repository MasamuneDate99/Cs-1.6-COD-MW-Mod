/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <hamsandwich>
#include <codmod>

#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"

new bool:ma_perk[33];
new iRandom;
new g_trail;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	iRandom = random_num(2,15);
	new szDesc[128];
	formatex(szDesc, 127, "You have 1 /% and chance to eject opponent into the air and blinding it", iRandom);
	cod_register_perk("Air Bullet", szDesc);
	
	RegisterHam(Ham_TakeDamage, "player", "ham_postTakeDamage", 1);
}
public plugin_precache()
{
	g_trail = precache_model("sprites/smoke.spr");
}
public cod_perk_enabled(id)
{
	ma_perk[id]=true;
}
public cod_perk_disabled(id)
{
	ma_perk[id]=false;
}
public ham_postTakeDamage(this, idinflictor, idattacker, Float:damage, damagebits)
{
	if(!is_user_connected(idattacker))
		return 0;
	new weapon = get_user_weapon(idattacker);
	
	if(ma_perk[idattacker] && (weapon == CSW_P228 || weapon == CSW_ELITE || weapon == CSW_FIVESEVEN || weapon == CSW_USP || weapon == CSW_GLOCK18 || weapon == CSW_DEAGLE) && random_num(1, iRandom)==1 && this != idattacker && get_user_team(idattacker) != get_user_team(this))
	{
		new Float:velocity[3];
		velocity[0]=0.0;
		velocity[1]=0.0;
		velocity[2]=0.0;
		set_pev(this, pev_velocity, velocity);
		velocity[2] = random_float(500.0,600.0);
		set_pev(this, pev_velocity, velocity);
		set_pev(this, pev_renderfx, kRenderFxGlowShell);
		set_pev(this, pev_renderamt, 16);
		new Float:Color[3];
		Color[0]=random_float(1.0, 255.0);
		Color[1]=random_float(1.0, 255.0);
		Color[2]=random_float(1.0, 255.0);
		set_pev(this, pev_rendercolor, Color);
		message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenFade"), _, this)
		write_short(1<<12)
		write_short(1<<12)
		write_short(1<<1);
		write_byte(floatround(Color[0]));
		write_byte(floatround(Color[1]));
		write_byte(floatround(Color[2]));
		write_byte(160);
		message_end();
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(TE_BEAMFOLLOW)
		write_short(this)
		write_short(g_trail)
		write_byte(3)
		write_byte(5)
		write_byte(floatround(Color[0]))
		write_byte(floatround(Color[1]))
		write_byte(floatround(Color[2]))
		write_byte(190)
		message_end()
		set_task(0.1, "NoneGlow", this, _, _, "b");
	}
}
public NoneGlow(id)
{
	if(pev(id, pev_flags) & FL_ONGROUND)
	{
		set_pev(id, pev_renderfx, kRenderFxNone);
		set_pev(id, pev_renderamt, 16);
		set_pev(id, pev_rendercolor, {0.0,0.0,0.0});
		remove_task(id);
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1045\\ f0\\ fs16 \n\\ par }
*/
